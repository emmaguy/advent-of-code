fun main() {
    val memory = arrayOf(3,225,1,225,6,6,1100,1,238,225,104,0,1102,7,85,225,1102,67,12,225,102,36,65,224,1001,224,-3096,224,4,224,1002,223,8,223,101,4,224,224,1,224,223,223,1001,17,31,224,1001,224,-98,224,4,224,1002,223,8,223,101,5,224,224,1,223,224,223,1101,86,19,225,1101,5,27,225,1102,18,37,225,2,125,74,224,1001,224,-1406,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1102,13,47,225,1,99,14,224,1001,224,-98,224,4,224,102,8,223,223,1001,224,2,224,1,224,223,223,1101,38,88,225,1102,91,36,224,101,-3276,224,224,4,224,1002,223,8,223,101,3,224,224,1,224,223,223,1101,59,76,224,1001,224,-135,224,4,224,102,8,223,223,1001,224,6,224,1,223,224,223,101,90,195,224,1001,224,-112,224,4,224,102,8,223,223,1001,224,7,224,1,224,223,223,1102,22,28,225,1002,69,47,224,1001,224,-235,224,4,224,1002,223,8,223,101,5,224,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,107,226,226,224,102,2,223,223,1006,224,329,1001,223,1,223,1107,677,226,224,1002,223,2,223,1005,224,344,101,1,223,223,108,677,226,224,102,2,223,223,1006,224,359,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,374,101,1,223,223,1008,677,226,224,1002,223,2,223,1006,224,389,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,404,101,1,223,223,1007,226,226,224,102,2,223,223,1006,224,419,101,1,223,223,7,226,226,224,102,2,223,223,1005,224,434,1001,223,1,223,8,226,226,224,1002,223,2,223,1006,224,449,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,464,101,1,223,223,1007,226,677,224,1002,223,2,223,1006,224,479,101,1,223,223,108,226,226,224,102,2,223,223,1005,224,494,1001,223,1,223,1108,677,677,224,102,2,223,223,1005,224,509,1001,223,1,223,107,226,677,224,1002,223,2,223,1005,224,524,101,1,223,223,1108,677,226,224,1002,223,2,223,1005,224,539,1001,223,1,223,1008,677,677,224,1002,223,2,223,1006,224,554,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,569,1001,223,1,223,8,677,226,224,102,2,223,223,1006,224,584,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,599,101,1,223,223,8,226,677,224,102,2,223,223,1006,224,614,101,1,223,223,1107,226,677,224,102,2,223,223,1006,224,629,101,1,223,223,108,677,677,224,1002,223,2,223,1005,224,644,1001,223,1,223,1107,226,226,224,102,2,223,223,1005,224,659,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,674,101,1,223,223,4,223,99,226)
    intcodeComputer(memory = memory)
    // val values = memory.joinToString(separator = ", ")
    // print("output memory: $values\n\n")
}

fun intcodeComputer(memory: Array<Int>) {
    var index = 0
    while (true) {
        val instruction = memory[index]
        when (instruction % 100) {
            1 -> {
                memory[memory[index + 3]] = param1(instruction, memory, index) + param2(instruction, memory, index)
                index += 4
            }
            2 -> {
                memory[memory[index + 3]] = param1(instruction, memory, index) * param2(instruction, memory, index)
                index += 4
            }
            3 -> {
                print("Awaiting input: ")
                val input = readLine()!!
                val address = memory[index + 1]
                memory[address] = input.toInt()
                index += 2
            }
            4 -> {
                val value = param1(instruction, memory, index)
                print("output is: $value\n")
                index += 2
            }
            5 -> {
                if (param1(instruction, memory, index) != 0) {
                    index = param2(instruction, memory, index)
                } else {
                    index += 3
                }
            }
            6 -> {
                if (param1(instruction, memory, index) == 0) {
                    index = param2(instruction, memory, index)
                } else {
                    index += 3
                }
            }
            7 -> {
                val value = if (param1(instruction, memory, index) < param2(instruction, memory, index)) {
                    1
                } else {
                    0
                }
                memory[memory[index + 3]] = value
                index += 4
            }
            8 -> {
                print("param1: ${param1(instruction,memory,index)}, param2: ${param2(instruction,memory,index)}\n")
                val value = if (param1(instruction, memory, index) == param2(instruction, memory, index)) {
                    1
                } else {
                    0
                }
                print("saving: $value\n")
                memory[memory[index + 3]] = value
                index += 4
            }
            99 -> return
            else -> throw IllegalArgumentException("Unexpected instruction: $instruction")
        }
    }
}

private fun param1(instruction: Int, memory: Array<Int>, index: Int): Int {
    return if ((instruction / 100) % 10 == 1) memory[index + 1] else memory[memory[index + 1]]
}

private fun param2(instruction: Int, memory: Array<Int>, index: Int): Int {
    return if ((instruction / 1000) % 10 == 1) memory[index + 2] else memory[memory[index + 2]]
}
